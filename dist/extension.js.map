{"version":3,"file":"extension.js","mappings":"0xBAEA,kBAIA,SAAgBA,EAASC,GAIxBC,QAAQC,IAAI,4EAKZ,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,iCAAiC,KAGjFF,EAAOG,OAAOC,uBAAuB,uCAErC,IAAIC,EAASL,EAAOG,OAAOG,iBAC3B,IAAKD,EACJ,OAGD,IAAIE,EAAYF,EAAOE,UACnBC,EAAOH,EAAOI,SAASC,QAAQH,GAEnC,GAAIC,EAAKG,OAAS,EACjBX,EAAOG,OAAOS,iBAAiB,gCAIhC,IACC,IAAIC,EAAkBC,EAAkBN,GAExCH,EAAOU,MACMA,GAAQV,GAAQW,WAAWC,SACzBV,IAEEQ,EAAKG,OAAOX,EAAUY,IAAKN,EAAgB,MAK1Db,EAAOC,SAASmB,eAAe,gCAClC,CAAE,MAAOC,GACRxB,QAAQC,IAAIuB,GACHrB,EAAOG,OAAOS,iBAAiB,2FACnC,KAGPhB,EAAQ0B,cAAcC,KAAKxB,EAC5B,CAEA,SAASyB,EAAaC,GAElB,OAAOA,EAAIC,QAAQ,QAAOC,GAAKA,EAAE,GAAGC,cAAgBD,EAAEE,MAAM,IAChE,CASA,SAAgBf,EAAkBN,GAEjC,IAAIsB,GADDtB,EARJ,SAAyBA,GAIrB,OAHOA,EAAKkB,QAAQ,6BAA8B,GAItD,CAGWK,CAAgBvB,IACJwB,MAAM,SAASC,QAAOC,GAAKA,EAAEvB,OAAS,IAAGwB,KAAID,GAAKA,EAAER,QAAQ,IAAK,MAEnFU,EAAqB,GACrBC,EAAwB,GAE5B,IAAK,IAAIC,KAAKR,EAAY,CACnB,KAAOQ,EAAEC,WAAW,MACzBD,EAAIA,EAAEE,OAAO,GAER,KAAOF,EAAEC,WAAW,OACzBD,EAAIA,EAAEE,OAAO,GAGR,IACIC,EAAMC,EADNC,EAAQL,EAAEN,MAAM,KAAKG,KAAID,GAAKA,EAAER,QAAQ,QAAS,MAChCkB,EAAY,GAC7BC,GAAS,EAGTF,EAAMhC,OAAS,GACf8B,EAAOE,EAAM,GACbD,EAAYC,EAAM,GAAGjB,QAAQ,IAAI,KACjCkB,EAAYpB,EAAamB,EAAM,IAE/BE,GAAS,GAGa,IAAjBF,EAAMhC,QACX8B,EAAOE,EAAM,GACbD,EAAYC,EAAM,GAAGjB,QAAQ,IAAI,KACjCkB,EAAYpB,EAAamB,EAAM,IAE/BE,GAAS,GAGJF,EAAMhC,SACX8B,EAAO,SACPC,EAAYC,EAAM,GAClBC,EAAYpB,EAAamB,EAAM,IAE/BE,GAAS,GAGTA,IAKAT,GAHgB,OAAOM,MAAcD,OAI9CJ,GAHmB,WAAWK,OAAeA,OAK5C,CAIH,MAFsB,uBAAuBN,SAA0BC,IAGxE,CAGA,SAAgBS,IAAc,CAzH9B,aA6DA,sBA4DA,eAEAC,EAAOC,QAAU,CACbrD,WACAmD,a,UCnIJC,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://creator-generator/./src/extension.ts","webpack://creator-generator/external commonjs \"vscode\"","webpack://creator-generator/webpack/bootstrap","webpack://creator-generator/webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"constructor-genrator-ts\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tlet disposable = vscode.commands.registerCommand('constructor-genrator-ts.start', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\t\t// Display a message box to the user\n\t\tvscode.window.showInformationMessage('Hello from constructor-genrator-ts!');\n\n\t\tlet editor = vscode.window.activeTextEditor;\n\t\tif (!editor) {\n\t\t\treturn; // 에디터가 켜지지 않았을 때\n\t\t}\n\t\t\n\t\tlet selection = editor.selection;\n\t\tlet text = editor.document.getText(selection); //드래그된 문장\n\n\t\tif (text.length < 1) {\n\t\t\tvscode.window.showErrorMessage('No selected properties.');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tlet constructorCode = createConstructor(text);\n\n\t\t\teditor.edit(\n                edit => editor?.selections.forEach(\n                  selection => \n                  {\n                    edit.insert(selection.end, constructorCode);\n                  }\n                )\n              );\n\n\t\t\t  vscode.commands.executeCommand('editor.action.formatSelection');\n\t\t} catch (err) { \n\t\t\tconsole.log(err);\n            vscode.window.showErrorMessage('Something went wrong! Try that the properties are in this format: \"private String name;\"');\n        }\n\t});\n\n\tcontext.subscriptions.push(disposable);\n}\n\nfunction toPascalCase(str: string) \n{\n    return str.replace(/\\w+/g,w => w[0].toUpperCase() + w.slice(1));\n}\n\nfunction removeAnotation(text: string): string {\n    text = text.replace(/@\\w+\\([^)]*\\)\\s*|\\@\\w+\\s*/g, '');\n    // text = text.replace(/@\\w+\\({[\\s\\S]*?\\}\\)\\s*/g, '');\n\n    return text\n}\n\nexport function createConstructor(text: string) {\n    text = removeAnotation(text);\n\tlet properties = text.split(/\\r?\\n/).filter(x => x.length > 2).map(x => x.replace(';', ''));\n\n\tlet generatedParamCode = ``;\n\tlet generatedAddFiledCode = ``;\n\n\tfor (let p of properties) {\n        while (p.startsWith(\" \")) {\n\t\t\tp = p.substr(1);\n\t\t}\n        while (p.startsWith(\"\\t\")) {\n\t\t\tp = p.substr(1);\n\t\t}\n\n        let words = p.split(\" \").map(x => x.replace(/\\r?\\n/, ''));\n        let type, attribute, Attribute = \"\";\n        let create = false;\n        \n        // if words == [\"private\", \"String\", \"name\"];\n        if (words.length > 2) {\n            type = words[2];\n            attribute = words[1].replace(':',' ');\n            Attribute = toPascalCase(words[1]);\n\n            create = true;\n        }\n        // if words == [\"String\", \"name\"];\n        else if (words.length === 2) {\n            type = words[1];\n            attribute = words[0].replace(':',' ');\n            Attribute = toPascalCase(words[0]);\n            \n            create = true;            \n        }\n        // if words == [\"name\"];\n        else if (words.length) {\n            type = \"Object\";\n            attribute = words[0];\n            Attribute = toPascalCase(words[0]);\n            \n            create = true;            \n        }\n\n        if (create) {\n\n            let paramCode = `\\t\\t${attribute}: ${type},\\n`;\n\t\t\tlet functionCode = `\\t this.${attribute} = ${attribute};\\n`;\n\n            generatedParamCode += paramCode;\n\t\t\tgeneratedAddFiledCode += functionCode;\n        }\n    }\n\n\tconst generatedCode = `\\n\\n\\tconstructor(\\n${generatedParamCode}) {\\n${generatedAddFiledCode}}`;\n\n\treturn generatedCode;\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n\nmodule.exports = {\n    activate,\n    deactivate,\n}\n\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["activate","context","console","log","disposable","vscode","commands","registerCommand","window","showInformationMessage","editor","activeTextEditor","selection","text","document","getText","length","showErrorMessage","constructorCode","createConstructor","edit","selections","forEach","insert","end","executeCommand","err","subscriptions","push","toPascalCase","str","replace","w","toUpperCase","slice","properties","removeAnotation","split","filter","x","map","generatedParamCode","generatedAddFiledCode","p","startsWith","substr","type","attribute","words","Attribute","create","deactivate","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}